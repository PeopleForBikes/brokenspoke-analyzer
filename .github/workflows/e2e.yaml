name: e2e

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

env:
  TEST_TAG: test/brokenspoke-analyzer:test
  TEST_COUNTRY: "united states"
  TEST_STATE: "new mexico"
  TEST_CITY: "santa rosa"
  TEST_FIPS: "3570670"

jobs:
  integration:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"

    services:
      postgres:
        image: ghcr.io/peopleforbikes/docker-postgis-bna:17-3.4-1
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: astral-sh/setup-uv@f94ec6bedd8674c4426838e6b50417d36b6ab231 #v5.3.1
        with:
          enable-cache: true
      - name: Set up Python
        run: uv python install
      - name: install dependencies
        run: |
          sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends \
            osm2pgrouting osm2pgsql osmctools osmium-tool postgresql-client postgis
      - name: Setup the project
        run: uv sync --all-extras --dev
      - run: |
          uv run bna configure docker
          # uv run bna run "${{ env.TEST_COUNTRY }}" "${{ env.TEST_CITY }}" "${{ env.TEST_STATE }}" "${{ env.TEST_FIPS }}"
          uv run bna prepare all "${{ env.TEST_COUNTRY }}" "${{ env.TEST_CITY }}" "${{ env.TEST_STATE }}" "${{ env.TEST_FIPS }}"
          uv run bna import all "${{ env.TEST_COUNTRY }}" "${{ env.TEST_CITY }}" "${{ env.TEST_STATE }}"  "${{ env.TEST_FIPS }}" --input-dir data/santa-rosa-new-mexico-united-states
          uv run bna compute "${{ env.TEST_COUNTRY }}" "${{ env.TEST_CITY }}" "${{ env.TEST_STATE }}" --input-dir data/santa-rosa-new-mexico-united-states

      - name: Run integration tests
        run: |
          set -x
          echo "List tables for debugging purpose."
          psql -c "\d" $DATABASE_URL

          echo "Ensure neighborhood_overall_scores table contains 23 records."
          ACTUAL=$(psql -t -c "SELECT COUNT(*) FROM neighborhood_overall_scores;" $DATABASE_URL)
          test $ACTUAL -eq 23

  docker-integration:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/postgres"

    services:
      postgres:
        image: ghcr.io/peopleforbikes/docker-postgis-bna:17-3.4-1
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # v3.4.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      - name: Extract repository name
        id: repo-name
        run: echo "repo_name=${GITHUB_REPOSITORY##*/}" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.TEST_TAG }}
      - name: Configure PostgreSQL
        run: >
          docker run
          --rm
          --network ${{ job.services.postgres.network }}
          -e DATABASE_URL
          ${{ env.TEST_TAG }}
          -vv configure custom 4 4096 postgres
      - name: Run full analysis
        run: >
          docker run
          --rm
          --network ${{ job.services.postgres.network }}
          -e DATABASE_URL
          ${{ env.TEST_TAG }}
          -vv run "${{ env.TEST_COUNTRY }}" "${{ env.TEST_CITY }}" "${{ env.TEST_STATE }}" "${{ env.TEST_FIPS }}"
      - name: Export the results
        run: >
          docker run
          --rm
          --network ${{ job.services.postgres.network }}
          -u $(id -u):$(id -g)
          -v ${PWD}:/usr/src/app/results
          -e DATABASE_URL
          ${{ env.TEST_TAG }}
          -vv export local-custom .
      # - name: Asserts
      #   run: |
      #     ls
      #     echo "Ensure neighborhood_overall_scores table contains 23 records + 1 header line."
      #     x=$(wc -l < "neighborhood_overall_scores.csv")
      #     test $x -eq 24
